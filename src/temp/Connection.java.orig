/******************************************************************************
 *  Compilation:  javac Connection.java
 *
 ******************************************************************************/
import java.io.*;
import java.net.Socket;
import java.util.Vector;

public class Connection  extends Thread {
    private Socket socket;
    private Out out;
    private In in;
    private ObjectInputStream sInput;       // to read from the socket
    private ObjectOutputStream sOutput;     // to
    private String message;
    private ChatMessage chatMsg;
    private String screenName;
    private ChatMessage screenNameObj;
    // one line buffer

    public Connection(Socket insocket, String screenName,ObjectInputStream sInput, ObjectOutputStream sOutput) throws ClassNotFoundException, IOException {
        this.screenName = screenName;
        screenNameObj = new ChatMessage(ChatMessage.USERSONLINE, screenName);
        System.out.println("here");
        // create output first
		this.sOutput = sOutput;
		this.sInput  = sInput;


        this.socket = insocket;
    }

    public String getScreenName() {
        return screenName;
    }



    public void println(ChatMessage s) throws ClassNotFoundException, IOException {

        sOutput.writeObject(s);
    }

    public void run() {
        String s;
        while(true) {
            try {
                chatMsg = (ChatMessage) sInput.readObject();
            }
            catch(IOException e) {
                System.out.println("Server has close the connection:");

                break;
            }
            // can&#39;t happen with a String object but need the catch anyhow
            catch(ClassNotFoundException e2) {
            }
        }

        try {
            if(sInput != null) sInput.close();

        }
        catch(Exception e) {} // not much else I can do
        try {
            if(sOutput != null) sOutput.close();
        }
        catch(Exception e) {} // not much else I can do
        try {
            if(socket != null) socket.close();
        }
        catch(Exception e) {} // not much else I can do
        System.err.println("Closed client socket");
    }


    /***************************************************************************
     *  The methods getMessage() and setMessage() are synchronized
     *  so that the thread in Connection doesn't call setMessage()
     *  while the ConnectionListener thread is calling getMessage().
     ***************************************************************************/


    public synchronized ChatMessage getChatMessage() {
        if (chatMsg == null) return null;
        ChatMessage temp = chatMsg;

        chatMsg = null;
        notifyAll();
        return temp;
    }

    public synchronized void setChatMessage(ChatMessage s) {
        if (chatMsg != null) {
            try                  {
                wait();
            }
            catch (Exception ex) {
                ex.printStackTrace();
            }
        }
        chatMsg = s;
    }

}
